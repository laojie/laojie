
TCP/IP协议族各层的作用
应用层：决定了向用户提供应用服务时通信的活动   协议都处于该层   HTTP协议。
传输层：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。 TCP
网络层：网络层用于处理在网络上流动的数据包。  IP
链接层：链接网络的硬件部分。    网络

1,负责传输的 IP协议，  位于网络层。
    IP地址 和 IP 是不一回事，IP其实是一种协议的名称。
    IP 协议的作用是把各种数据包传送给对方。 IP 地址和MAC地址。
    IP 地址指明了节点配分配到的地址，MAC 地址是指网卡所属的固定地址。 配对使用。
三次握手  SYN:发送标志   ACK:确认标志
    标有SYN的数据包发送
                                        收到SYN的数据包并发送标有SYN/ACK的数据包
    发送标有ACK的包

2,告知服务器意图的HTTP方法
    GET:获取资源
    POST:传输实体主体
    PUT:传输文件
    HEAD:获得报文首部
    DELETE:删除文件 与PUT相反
    OPTIONS:询问支持的方法
    TRACE:追踪路径，让Web服务器端将之前的请求通信回环给客户端的方法
    CONNECT:要求用隧道协议连接代理
3,持久连接 HTTP keep-alive
4,管道化   不用等待就能直接发送下一个请求

5,HTTP报文 ：  字符串的数据文本
    请求端（客户端）请求报文
    响应端（服务器端） 响应报文
    编码提升传输效率
    压缩传输 gzip 
6,HTTP状态码
    1xx  信息性状态码   接收的请求正在处理
    2xx  成功状态码     请求正常处理完毕
        200 成功
        204 请求处理成功，不需要资源返回
        206 对资源某一部分请求
    3xx  重定向状态码    需要进行附加操作以完成请求
        301 永久性重定向
        302 临时性重定向
    4xx  客户端错误状态码 服务器无法处理请求
        404 未发现该页面
    5xx  服务端错误状态码 服务器处理请求错误
        500 服务器执行请求时发生错误
        501

与HTTP协作的Web服务器
    HTTP通信时，除客户端和服务器以外，还有一些用于听信数据转发的应用程序，代理、网关和隧道，配合服务器使用。
    代理：一种有转发功能的应用程序，他扮演了位于服务器和客户端”中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器端返回的响应并转发给客户端。
    网关：转发其他服务器通信数据的服务器。
    隧道：隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。


Node.js
1,权限问题
    在Linux系统下，使用NodeJS监听80或443端口提供HTTP(S)服务时需要root权限，有两种方式可以做到。

    一种方式是使用sudo命令运行NodeJS。例如通过以下命令运行的server.js中有权限使用80和443端口。一般推荐这种方式，可以保证仅为有需要的JS脚本提供root权限。

        $ sudo node server.js
    另一种方式是使用chmod +s命令让NodeJS总是以root权限运行，具体做法如下。因为这种方式让任何JS脚本都有了root权限，不太安全，因此在需要很考虑安全的系统下不推荐使用。

        $ sudo chown root /usr/local/bin/node
        $ sudo chmod +s /usr/local/bin/node 

2,模块
主模块作为程序入口点，所有模块在执行过程中只初始化一次。
在编写每个模块是，都有require、exports、module三个预先定义哈哦的变量
require:
    require函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以./开头），或者是绝对路径（以/或C:之类的盘符开头）。另外，模块名中的.js扩展名可以省略。
exports:
    exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象
        exports.hello = function () {
            console.log('Hello World!');
        };
module:
    通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。
        module.exports = function () {
            console.log('Hello World!');
        };
3,代码的组织和部署
内置模块
    如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require('fs')。

node_modules目录
    NodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，在该模块中使用require('foo/bar')方式加载模块时，则NodeJS依次尝试使用以下路径。

     /home/user/node_modules/foo/bar
     /home/node_modules/foo/bar
     /node_modules/foo/bar
NODE_PATH环境变量

    与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。例如定义了以下NODE_PATH环境变量：

 NODE_PATH=/home/user/lib:/home/lib


包（package）
    我们已经知道了JS模块的基本单位是单个JS文件，但复杂些的模块往往由多个子模块组成。为了便于管理和使用，我们可以把由多个子模块组成的大模块称做包，并把所有子模块放在同一个目录里。

package.json





4,文件操作
process.argv获得命令行参数







