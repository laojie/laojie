7.4
shell 的前三个看作标准输入、输出和错误，文件描述符0 1 2

重定向标准错误：ls -l /bin/usr 2>test.txt

重定向标准输出和错误到同一个文件   >test.txt 2>&1
                              &>test.txt

7.5 处理不需要的输出 叫做位存储桶
    不做任何处理 ls -l /bin/usr 2> /dev/null           

7.6 
7.7 cat 
7.8 管道线 |
7.9 过滤器 ls /bin | sort | less
7.10 uniq 报道或忽略重复行
    ls /bin /usr/bin | sort | uniq | less
                             uniq -d  重复的

7.11 wc 打印行，字和字节数
     tail -f tail 命令继续监测这个文件,当新的内容添加到文件后,它们会立即出现 在屏幕上。这会一直继续下去直到你输入 Ctrl-c。
tee -从 Stdin 读取数据,并同时输出到 Stdout 和文件
ls /usr/bin | tee ls.txt | grep zip


8.6  花括号展开 （循环）
8.7  命令的替换 
     ls -l $(which cp)  ==  ls -l `which cp`
     展列出查找之后的cp 命令详情
10.3 二进制，八进制， 十六进制
    二进制： 逢二进一  0，1，10，11，100，101，110，111 ....
    八进制： 逢八进一  用数字0到7计数
            0，1，2，3，4，5，6，7，10，11，12，13，14，15，16，17，20......
    十六进制： 使用0-9，大写字母A-F 逢十六进一
            0，1，2，3，4，5，6，7，8，9，A，B，C，D，E，F，10，11，12......

11.2  ps 进程
    ps x 查看所有的进程，在 TTY 一栏中出现的 “?” ,表示没有控制终端
    STAT 标识运行状态 ：R(run) 运行 S(sleep) 睡眠 D不可中断睡眠 T(Timeout) 停止  Z 死进程 < 一个高优先级进程  N 低优先级进程
    ps aux 显示所有进程
        USER 用户ID 进程的所有者
        %CPU 以百分比标识的CPU 使用率
        %MEM 以百分比标识的内存使用率
        VSZ  虚拟内存大小
        RSS  进程占用的物理内存的大小，以千字节为单位
        START 进程运行的起始时间 

11.3 top 
    PID USER PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
      PID  -- 进程id  
      PPID -- 父进程id  
      RUSER -- Real user name  
      UID -- 进程所有者的用户id  
      USER -- 进程所有者的用户名  
      GROUP -- 进程所有者的组名  
      TTY -- 启动进程的终端名。不是从终端启动的进程则显示为 ?  
      PR -- 优先级  
      NI --  nice值。负值表示高优先级，正值表示低优先级  
      P -- 最后使用的CPU，仅在多CPU环境 下有意义  
      %CPU -- 上次更新到现在的CPU时间占用百分比  
      TIME -- 进程使用的CPU时间总计，单位秒  
      TIME+ -- 进程使用的CPU时间总计，单位1/100秒  
      %MEM -- 进程使用的物理内存 百分比  
      VIRT -- 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES  
      SWAP -- 进程使用的虚拟内存中，被换出的大小，单位kb。  
      RES -- 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA 
      CODE -- 可执行代码占用的物理 内存大小，单位kb  
      DATA -- 可执行代码以外的部分(数据 段+栈)占用的物理 内存大小，单位kb  
      SHR -- 共享内存大小，单位kb  
      nFLT -- 页面错误次数  
      nDRT -- 最后一次写入到现在，被修改过的页面数。  
      S -- 进程状态。
                D =不可中断的睡眠状态
                R =运行
                S =睡眠
                T =跟踪/停止
                Z =僵尸进程  
      COMMAND -- 命令名/命令行  
      WCHAN -- 若该进程在睡眠，则显示睡眠中的系统函数名 

        jobs 正在运行的工作

12， shell 环境
    
/etc/profile   :  应用于所有用户的全局配置脚本。
̃/.bash_profile  :用户私人的启动文件。可以用来扩展或重写全局配置脚本中
的设置。
̃/.bash_login    :如果文件  ̃/.bash profile 没有找到,bash 会尝试读取这个脚本。
̃/.profile     :如果文件  ̃/.bash profile 或文件  ̃/.bash login 都没有找到, bash 会试图读取这个文件。这是基于 Debian 发行版的默认 设置,比方说 Ubuntu。
/etc/bash.bashrc :应用于所有用户的全局配置文件。
 ̃/.bashrc: 用户私有的启动文件。可以用来扩展或重写全局配置脚本中
的设置。

我们可以强迫 bash 重新读取修改 过的.bashrc 文件,使用下面的命令:source .bashrc
vim
:buffer 命 令,其后加上缓冲区号码,来转换文件
netstat 程序被用来检查各种各样的网络设置和统计数据
查找文件 locate  find




shell 

一，shell结构
1,#! 指定执行脚本的shell
2,#  注释行
3,命令和控制结构
创建shell程序的步骤
第一步: 创建一个包含命令和控制结构的文件
第二步: 修改这个文件的权限使它可以执行 使用chmod u+x
第三步: 执行 ./example （sh ./example）
二，shell变量
变量： 是shell传递数据的一种方法，用来代表每个取值的符号名。
shell有两类变量：临时变量（自定义）和永久变量

用户自定义变量
用户自定义变量由数字或者下划线开头，由字母、数字或下划线序列组成，并且大小写字母意义不同。变量名没有长度限制。
在使用变量的时候，需要在变量名前加上前缀“$”

设置和使用变量
变量赋值： A=B  中间没有空格
    单引号不读取赋值，输出原文本
    unset 删除一个变量

位置变量
    ls -l file1 file2
    $0 这个程序的文件名ls -l
    $n 带表参数  n=1-9
特殊变量
    $* 这个程序的所有参数
    $# 这个程序的参数个数
    $$ 这个程序的 PID
    $! 执行上一个后台命令的PID
    $? 执行上一个命令的返回值
    0 非 0 成功
 
Shell 命令  `命令替换符`
1，read命令：从键盘读入数据，赋给变量
sh -x 分析脚本运行流程
2，expr命令：算法运算 对整数型变量进行算数运算 中间有空格

变量测试语句
用于测试变量是否相等
test 测试条件

字符串测试
test str1=str2

if 控制流程

























