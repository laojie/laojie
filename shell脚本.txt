###Shell脚本
变量
    首个字符必须为字母（a-z，A-Z）。
    中间不能有空格，可以使用下划线（_）。
    不能使用标点符号。
    不能使用bash里的关键字（可用help命令查看保留关键字）。
    使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。
    使用 unset 命令可以删除变量  unset 命令不能删除只读变量。


redis

set   name john   可被覆盖
setnx name john   不可被覆盖
setex name 10 john  设置有效期
setrange 
getset 获取新值设置旧值
getrange
mget
incr 递增

1，记录命令历史
    保存在用户目录下的 .bash_history 文件中。只有当前用户正常退出shell才会保存。
    !! 表示执行上一条指令
    !n 这里的n是数字，表示执行命令历史中第n条指令。
    !字符串 最近一次以xxx为开头的指令




记录命令历史
我们敲过的命令，linux是会有记录的，预设可以记录1000条历史命令。这些命令保存在用户的家目录中的.bash_history文件中。有一点需要你知道的是，只有当用户正常退出当前shell时，在当前shell中运行的命令才会保存至.bash_history文件中。

与命令历史有关的有一个有意思的字符那就是 ‘!’ 了。常用的有这么几个应用：

1） !! 连续两个 ‘!’, 表示执行上一条指令；

[root@localhost ~]# pwd
/root
[root@localhost ~]# !!
pwd
/root
2） !n 这里的n是数字，表示执行命令历史中第n条指令，例如 !1002 表示执行命令历史中第1002个命令；

[root@localhost ~]# history |grep 1002
 1002  pwd
 1015  history |grep 1002
[root@localhost ~]# !1002
pwd
/root
history 命令如果未改动过环境变量，默认可以把最近1000条命令历史打印出来。

3） !字符串 （字符串大于等于1），例如 !pw 表示执行命令历史中最近一次以 ‘pw’ 为开头的指令。

[root@localhost ~]# !pw
pwd
/root
指令和文件名补全
最开始阿铭就介绍过这个功能了，记得吗？它就是按tab键，它可以帮你补全一个指令，也可以帮你补全一个路径或者一个文件名。连续按两次tab键，系统则会把所有的指令或者文件名都列出来。

别名
前面也出现过alias的介绍，这个就是bash所特有的功能之一了。我们可以通过alias把一个常用的并且很长的指令别名一个简洁易记的指令。如果不想用了，还可以用unalias解除别名功能。直接敲alias会看到目前系统预设的alias.

系统预设的alias指令也就这几个而已，你也可以自定义你想要的指令别名。alias语法很简单， alias [命令别名]=['具体的命令']

[root@localhost ~]# alias aming='pwd'
[root@localhost ~]# aming
/root
[root@localhost ~]# unalias aming
[root@localhost ~]# aming
bash: aming: command not found
使用 unalias 命令别名 就可以把设置的别名给解除了。

通配符
在bash下，可以使用 * 来匹配零个或多个字符，而用 ? 匹配一个字符。

[root@localhost ~]# ls -d test*
test1.txt  test2  test3  test.pl  test.txt
[root@localhost ~]# ls -d test?
test2  test3
输入输出重定向
输入重定向用于改变命令的输入，输出重定向用于改变命令的输出。输出重定向更为常用，它经常用于将命令的结果输入到文件中，而不是屏幕上。输入重定向的命令是<，输出重定向的命令是>，另外还有错误重定向2>，以及追加重定向>>，稍后会详细介绍。

管道符
前面已经提过过管道符 “|”, 就是把前面的命令运行的结果丢给后面的命令。

变量
除了PATH, HOME, LOGNAME外，系统预设的环境变量还有哪些呢？
使用 env 命令即可全部列出系统预设的全部系统变量了。
PATH 决定了shell将到哪些目录中寻找命令或程序 
HOME 当前用户主目录 
HISTSIZE 历史记录数 
LOGNAME 当前用户的登录名 
HOSTNAME 指主机的名称 
SHELL 前用户Shell类型 
LANG 语言相关的环境变量，多语言可以修改此环境变量 
MAIL 当前用户的邮件存放目录 
PWD 当前目录

linux shell中的特殊符号


你在学习linux的过程中，也许你已经接触过某个特殊符号，例如”*”，它是一个通配符号，代表零个或多个字符或数字。下面阿铭就说一说常用到的特殊字符。

* 代表零个或多个任意字符。
[root@localhost ~]# ls -d test*
test  test1  test2  test3
? 只代表一个任意的字符
[root@localhost ~]# touch testa
[root@localhost ~]# touch testb.txt
[root@localhost ~]# ls -d test?
test1  test2  test3  testa
不管是数字还是字母，只要是一个都能匹配出来。

# 这个符号在linux中表示注释说明的意思，即 # 后面的内容linux忽略掉。
[root@localhost ~]# abc=123 #aaaaa
[root@localhost ~]# echo $abc
123
\ 脱意字符，将后面的特殊符号（例如”*” ）还原为普通字符。
[root@localhost ~]# ls -d test\*
ls: 无法访问test*: 没有那个文件或目录
| 管道符，前面多次出现过，它的作用在于将符号前面命令的结果丢给符号后面的命令。这里提到的后面的命令，并不是所有的命令都可以的，一般针对文档操作的命令比较常用，例如cat, less, head, tail, grep, cut, sort, wc, uniq, tee, tr, split, sed, awk等等，其中grep, sed, awk为正则表达式必须掌握的工具，在后续内容中详细介绍。
[root@localhost ~]# cat testb.txt |wc -l
0
wc -l 用来计算一个文档有多少行。在这里阿铭一下子列出来很多对你陌生的命令，其实这些命令在日常的处理文档工作中非常实用，所以阿铭需要先简单介绍一下它们，如果你记不住没有关系，以后用到的时候再过来查或者直接用man来查询帮助文档。

命令 : cut

用来截取某一个字段

语法： cut -d '分隔字符' [-cf] n 这里的n是数字

-d ：后面跟分隔字符，分隔字符要用单引号括起来

-c ：后面接的是第几个字符

-f ：后面接的是第几个区块

[root@localhost ~]# cat /etc/passwd |cut -d ':' -f 1 |head -n5
root
bin
daemon
adm
lp
-d 后面跟分隔字符，这里使用冒号作为分割字符，-f 1 就是截取第一段，-f和1之间的空格可有可无。

[root@localhost ~]# head -n2 /etc/passwd|cut -c2
o
i
[root@localhost ~]# head -n2 /etc/passwd|cut -c1
r
b
[root@localhost ~]# head -n2 /etc/passwd|cut -c1-10
root:x:0:0
bin:x:1:1:
[root@localhost ~]# head -n2 /etc/passwd|cut -c5-10
:x:0:0
x:1:1:
-c 后面可以是1个数字n，也可以是一个区间n1-n2，还可以是多个数字n1,n2,n3

[root@localhost ~]# head -n2 /etc/passwd|cut -c1,3,10
ro0
bn:
命令 : sort

sort 用做排序

语法： sort [-t 分隔符] [-kn1,n2] [-nru] 这里的n1 < n2

-t 分隔符 ：作用跟cut的-d一个意思

-n ：使用纯数字排序

-r ：反向排序

-u ：去重复

-kn1,n2 ：由n1区间排序到n2区间，可以只写-kn1，即对n1字段排序

[root@localhost ~]# head -n5 /etc/passwd |sort
adm:x:3:4:adm:/var/adm:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
如果sort不加任何选项，则从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。

[root@localhost ~]# head -n5 /etc/passwd |sort -t: -k3 -n
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
-t 后面跟分隔符，-k后面跟数字，表示对第几个区域的字符串排序，-n 则表示使用纯数字排序

[root@localhost ~]# head -n5 /etc/passwd |sort -t: -k3,5 -r
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
-k3,5 表示从第3到第5区域间的字符串排序，-r表示反向排序

命令 : wc

用于统计文档的行数、字符数、词数，常用的选项为：

-l ：统计行数

-m ：统计字符数

-w ：统计词数

[root@localhost ~]# wc /etc/passwd
  27   37 1220 /etc/passwd
[root@localhost ~]# wc -l /etc/passwd
27 /etc/passwd
[root@localhost ~]# wc -m /etc/passwd
1220 /etc/passwd
[root@localhost ~]# wc -w /etc/passwd
37 /etc/passwd
wc 不跟任何选项，直接跟文档，则会把行数、词数、字符数依次输出。

命令 : uniq

去重复的行，阿铭最常用的选项只有一个：

-c ：统计重复的行数，并把行数写在前面

[root@localhost ~]# vim testb.txt
把下面的内容写入testb.txt, 保存。

111
222
111
333
使用uniq 的前提是需要先给文件排序，否则不管用。

[root@localhost ~]# uniq testb.txt
111
222
111
333
[root@localhost ~]# sort testb.txt |uniq
111
222
333
[root@localhost ~]# sort testb.txt |uniq -c
      2 111
      1 222
      1 333
命令 : tee

后跟文件名，类似与重定向 “>”, 但是比重定向多了一个功能，在把文件写入后面所跟的文件中的同时，还显示在屏幕上。

[root@localhost ~]# echo "aaaaaaaaaaaaaaaaaaaaaaaaaaa" |tee testb.txt
aaaaaaaaaaaaaaaaaaaaaaaaaaa
[root@localhost ~]# cat testb.txt
aaaaaaaaaaaaaaaaaaaaaaaaaaa
tee 常用语管道符 “|” 后。

命令 : tr

替换字符，常用来处理文档中出现的特殊符号，如DOS文档中出现的^M符号。常用的选项有两个：

-d ：删除某个字符，-d 后面跟要删除的字符

-s ：把重复的字符去掉

最常用的就是把小写变大写: tr ‘[a-z]’ ‘[A-Z]’

[root@localhost ~]# head -n2 /etc/passwd |tr '[a-z]' '[A-Z]'
ROOT:X:0:0:ROOT:/ROOT:/BIN/BASH
BIN:X:1:1:BIN:/BIN:/SBIN/NOLOGIN
当然替换一个字符也是可以的。

[root@localhost ~]# grep 'root' /etc/passwd |tr 'r' 'R'
Root:x:0:0:Root:/Root:/bin/bash
opeRatoR:x:11:0:opeRatoR:/Root:/sbin/nologin
不过替换、删除以及去重复都是针对一个字符来讲的，有一定局限性。如果是针对一个字符串就不再管用了，所以阿铭建议你只需简单了解这个tr即可，以后你还会学到更多可以实现针对字符串操作的工具。

命令 : split

切割文档，常用选项：

-b ：依据大小来分割文档，单位为byte

[root@localhost ~]# mkdir split_dir
[root@localhost ~]# cd !$
cd split_dir
[root@localhost split_dir]# cp /etc/passwd ./
[root@localhost split_dir]# split -b500 passwd
[root@localhost split_dir]# ls
passwd  xaa  xab  xac
如果split不指定目标文件名，则会以xaa xab... 这样的文件名来存取切割后的文件。当然我们也可以指定目标文件名：

[root@localhost split_dir]# split  -b500 passwd  123
[root@localhost split_dir]# ls
123aa  123ab  123ac  passwd
-l ：依据行数来分割文档

[root@localhost split_dir]# rm -f 123a*
[root@localhost split_dir]# split -l10 passwd
[root@localhost split_dir]# wc -l *
  27 passwd
  10 xaa
  10 xab
  7 xac
  54 总用量
$ 除了用于变量前面的标识符外，还有一个妙用，就是和 ‘!’ 结合起来使用。
[root@localhost ~]# ls testb.txt
testb.txt
[root@localhost ~]# ls !$
ls testb.txt
testb.txt
‘!$’ 表示上条命中中最后一个变量（总之就是上条命令中最后出现的那个东西）例如上边命令最后是testb.txt那么在当前命令下输入!$则代表testb.txt.

; : 分号。平时我们都是在一行中敲一个命令，然后回车就运行了，那么想在一行中运行两个或两个以上的命令如何呢？则需要在命令之间加一个 ”;” 了。
[root@localhost ~]# ls -d test*;  touch test111; ls -d test*
test  test1  test2  test3  testa  testb.txt
test  test1  test111  test2  test3  testa  testb.txt
~ : 用户的家目录，如果是root则是 /root ，普通用户则是 /home/username
[root@localhost ~]# cd ~
[root@localhost ~]# pwd
/root
[root@localhost ~]# su test
[test@localhost root]$ cd ~
[test@localhost ~]$ pwd
/home/test
& : 如果想把一条命令放到后台执行的话，则需要加上这个符号。通常用于命令运行时间非常长的情况。
[root@localhost ~]# sleep 30 &
[1] 3260
[root@localhost ~]# jobs
[1]+  Running                 sleep 30 &
>, >>, 2>, 2>> 前面讲过重定向符号> 以及>>　分别表示取代和追加的意思，然后还有两个符号就是这里的2> 和 2>>　分别表示错误重定向和错误追加重定向，当我们运行一个命令报错时，报错信息会输出到当前的屏幕，如果想重定向到一个文本里，则要用2>或者2>>
[root@localhost ~]# ls aaaa
ls: 无法访问aaaa: 没有那个文件或目录
[1]+  Done                    sleep 30
[root@localhost ~]# ls aaaa
ls: 无法访问aaaa: 没有那个文件或目录
[root@localhost ~]# ls aaaa 2> /tmp/error
[root@localhost ~]# cat /tmp/error
ls: 无法访问aaaa: 没有那个文件或目录
[root@localhost ~]# ls aaaa 2>> /tmp/error
[root@localhost ~]# cat /tmp/error
ls: 无法访问aaaa: 没有那个文件或目录
ls: 无法访问aaaa: 没有那个文件或目录
[ ] 中括号，中间为字符组合，代表中间字符中的任意一个。
[root@localhost ~]# ls -d test*
test  test1  test111  test2  test3  testa  testb.txt
[root@localhost ~]# ls -d test[1-3]
test1  test2  test3
[root@localhost ~]# ls -d test[1a3]
test1  test3  testa
[root@localhost ~]# ls -d test[0-9]
test1  test2  test3
[root@localhost ~]# ls -d test[0-9a-z]
test1  test2  test3  testa
&& 与 ||
在上面刚刚提到了分号，用于多条命令间的分隔符。另外还有两个可以用于多条命令中间的特殊符号，那就是 “&&” 和 “||” 下面阿铭把这几种情况全列出：

command1 ; command2
command1 && command2
command1 || command2
使用 ”;” 时，不管command1是否执行成功都会执行command2；

使用 “&&” 时，只有command1执行成功后，command2才会执行，否则command2不执行；

使用 “||” 时，command1执行成功后command2 不执行，否则去执行command2，总之command1和command2总有一条命令会执行。

在做实验前，阿铭想把所有的 test* 删除掉，可是删除的时候，却提示说权限不够，下面是阿铭排除问题的过程：

[root@localhost ~]# rm -rf test*
rm: 无法删除"test2/test1": 权限不够
rm: 无法删除"test2/test3": 权限不够
rm: 无法删除"test2/test4": 权限不够
[root@localhost ~]# ls test*
test1  test3  test4
[root@localhost ~]# lsattr test*
-----a-------e- test2/test1
----i--------e- test2/test3
-------------e- test2/test4
[root@localhost ~]# chattr -a test2/test1
[root@localhost ~]# chattr -i test2/test3
[root@localhost ~]# rm -rf test*
rm: 无法删除"test2/test1": 权限不够
rm: 无法删除"test2/test3": 权限不够
rm: 无法删除"test2/test4": 权限不够
[root@localhost ~]# ls test*
test1  test3  test4
[root@localhost ~]# ls -ld test*
drwxrwxr-x 2 root root 4096 5月  10 10:12 test2
[root@localhost ~]# ls -l test2/*
-rw-r--r-- 1 root root 6 5月  10 10:20 test2/test1
-rw-r--r-- 1 root root 0 5月  10 10:11 test2/test3
-rw-r--r-- 1 root root 0 5月  10 10:12 test2/test4
[root@localhost ~]# lsattr test2/*
-------------e- test2/test1
-------------e- test2/test3
-------------e- test2/test4
[root@localhost ~]# lsattr test2
-------------e- test2/test1
-------------e- test2/test3
-------------e- test2/test4
[root@localhost ~]# lsattr -d test2
----i--------e- test2
[root@localhost ~]# chattr -i test2/
[root@localhost ~]# rm -rf test2/
如果你之前跟着阿铭做过同样的实验，相信你也会出现同样的问题的。接下来阿铭要通过做实验来说明 “&&” 与 “||” 这两个特殊符号的作用：

[root@localhost ~]# touch test1 test3
[root@localhost ~]# ls test2 && touch test2
ls: 无法访问test2: 没有那个文件或目录
[root@localhost ~]# ls test2
ls: 无法访问test2: 没有那个文件或目录
[root@localhost ~]# ls test2 || touch test2
ls: 无法访问test2: 没有那个文件或目录
[root@localhost ~]# ls test*
test1  test2  test3



shell中可能经常能看到：echo log > /dev/null 2>&1


命令的结果可以通过%>的形式来定义输出

/dev/null ：代表空设备文件
>  ：代表重定向到哪里，例如：echo "123" > /home/123.txt
1  ：表示stdout标准输出，系统默认值是1，所以">/dev/null"等同于"1>/dev/null"
2  ：表示stderr标准错误
&  ：表示等同于的意思，2>&1，表示2的输出重定向等同于1

1 > /dev/null 2>&1 语句含义：
1 > /dev/null ： 首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。
2>&1 ：接着，标准错误输出重定向（等同于）标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。



实例解析：

cmd >a 2>a 和 cmd >a 2>&1 为什么不同？
cmd >a 2>a ：stdout和stderr都直接送往文件 a ，a文件会被打开两遍，由此导致stdout和stderr互相覆盖。
cmd >a 2>&1 ：stdout直接送往文件a ，stderr是继承了FD1的管道之后，再被送往文件a 。a文件只被打开一遍，就是FD1将其打开。


两者的不同点在于：

cmd >a 2>a 相当于使用了FD1、FD2两个互相竞争使用文件 a 的管道；
cmd >a 2>&1 只使用了一个管道FD1，但已经包括了stdout和stderr。
从IO效率上来讲，cmd >a 2>&1的效率更高。


本例中有一个命令 date 之前阿铭从未介绍过，这个命令在shell脚本中使用非常频繁，阿铭有必要向你介绍一下它的用法。

命令 : date

阿铭举几个比较实用的例子来带你掌握它的用法:

[root@localhost sbin]# date +"%Y-%m-%d %H:%M:%S"
2013-05-24 19:41:01
date在脚本中最常用的几个用法：

data +%Y 以四位数字格式打印年份

date +%y 以两位数字格式打印年份

date +%m 月份

date +%d 日期

date +%H 小时

date +%M 分钟

date +%S 秒

date +%w 星期，如果结果显示0 则表示周日

有时在脚本中会用到一天前的日期:

[root@localhost sbin]# date -d "-1 day" +%d
23
或者一小时前:

[root@localhost sbin]# date -d "-1 hour" +%H
18
甚至1分钟前:

[root@localhost sbin]# date -d "-1 min" +%M
50
shell脚本中的变量

在shell脚本中使用变量显得我们的脚本更加专业更像是一门语言，变量的作用当然不是为了专业。如果你写了一个长达1000行的shell脚本，并且脚本中出现了某一个命令或者路径几百次。突然你觉得路径不对想换一下，那岂不是要更改几百次？你固然可以使用批量替换的命令，但也是很麻烦，并且脚本显得臃肿了很多。变量的作用就是用来解决这个问题的。

[root@localhost sbin]# cat variable.sh
#! /bin/bash

## In this script we will use variables.
## Writen by Aming 2013-05-24.

d=`date +%H:%M:%S`
echo "The script begin at $d."
echo "Now we'll sleep 2 seconds."
sleep 2
d1=`date +%H:%M:%S`
echo "The script end at $d1."
脚本中使用到了反引号，你是否还记得它的作用？ ‘d’ 和 ‘d1’ 在脚本中作为变量出现，定义变量的格式为 变量名=变量的值 当在脚本中引用变量时需要加上 ‘$’ 符号，这跟前面讲的在shell中自定义变量是一致的。下面看看脚本执行结果吧:

[root@localhost sbin]# sh variable.sh
The script begin at 20:16:57.
Now we'll sleep 2 seconds.
The script end at 20:16:59.
下面我们用shell计算两个数的和:

[root@localhost sbin]# cat sum.sh
#! /bin/bash

## For get the sum of tow numbers.
## Aming 2013-05-24.

a=1
b=2
sum=$[$a+$b]

echo "$a+$b=$sum"
数学计算要用[ ]括起来并且外头要带一个 ‘$’ 脚本结果为:

[root@localhost sbin]# sh sum.sh
1+2=3
Shell脚本还可以和用户交互:

[root@localhost sbin]# cat read.sh
#! /bin/bash

## Using 'read' in shell script.
## Aming 2013-05-24.

read -p "Please input a number: " x
read -p "Please input another number: " y
sum=$[$x+$y]
echo "The sum of the two numbers is: $sum"
read 命令就是用在这样的地方，用于和用户交互，把用户输入的字符串作为变量值。脚本执行过程如下:

[root@localhost sbin]# sh read.sh
Please input a number: 2
Please input another number: 10
The sum of the two numbers is: 12
我们不妨加上 -x 选项再来看看这个执行过程:

[root@localhost sbin]# sh -x read.sh
+ read -p 'Please input a number: ' x
Please input a number: 22
+ read -p 'Please input another number: ' y
Please input another number: 13
+ sum=35
+ echo 'The sum of the two numbers is: 35'
The sum of the two numbers is: 35
有时候我们会用到这样的命令 /etc/init.d/iptables restart 前面的/etc/init.d/iptables文件其实就是一个shell脚本，为什么后面可以跟一个 “restart”? 这里就涉及到了shell脚本的预设变量。实际上，shell脚本在执行的时候后边是可以跟参数的，而且还可以跟多个。

[root@localhost sbin]# cat option.sh
#! /bin/bash

sum=$[$1+$2]
echo "sum=$sum"
执行结果为:

[root@localhost sbin]# sh -x option.sh 1 2
+ sum=3
+ echo sum=3
sum=3
在脚本中，你会不会奇怪，哪里来的$1和$2，这其实就是shell脚本的预设变量，其中$1的值就是在执行的时候输入的1，而$2的值就是执行的时候输入的$2，当然一个shell脚本的预设变量是没有限制的，这回你明白了吧。另外还有一个$0，不过它代表的是脚本本身的名字。不妨把脚本修改一下:

[root@localhost sbin]# cat option.sh
#! /bin/bash

echo "$1 $2 $0"
执行结果:

[root@localhost sbin]# sh option.sh  1 2
1 2 option.sh
shell脚本中的逻辑判断

如果你学过C或者其他语言，相信你不会对 if 陌生，在shell脚本中我们同样可以使用 if 逻辑判断。在shell中if判断的基本语法为：

1）不带else

if  判断语句; then
    command
fi
例如:

[root@localhost sbin]# cat if1.sh
#! /bin/bash

read -p "Please input your score: " a
if ((a<60)); then
    echo "You didn't pass the exam."
fi
在if1.sh中出现了 ((a<60)) 这样的形式，这是shell脚本中特有的格式，用一个小括号或者不用都会报错，请记住这个格式。执行结果为:

[root@localhost sbin]# sh if1.sh
Please input your score: 90
[root@localhost sbin]# sh if1.sh
Please input your score: 33
You didn't pass the exam.
2）带有else

if  判断语句  ; then
    command
else
    command
fi
例如:

[root@localhost sbin]# cat if2.sh
#! /bin/bash

read -p "Please input your score: " a
if ((a<60)); then
     echo "You didn't pass the exam."
else
     echo "Good! You passed the exam."
fi
执行结果:

[root@localhost sbin]# sh if2.sh
Please input your score: 80
Good! You passed the exam.
[root@localhost sbin]# sh if2.sh
Please input your score: 25
You didn't pass the exam.
和上一例唯一区别的地方是，如果输入大于等于60的数字会有所提示。

3）带有elif

if  判断语句一  ; then
    command
elif  判断语句二; then
    command
else
    command
fi
例如:

[root@localhost sbin]# cat if3.sh
#! /bin/bash

 read -p "Please input your score: " a
 if ((a<60)); then
         echo "You didn't pass the exam."
 elif ((a>=60)) && ((a<85)); then
         echo "Good! You pass the exam."
 else
         echo "very good! Your socre is very high!"
 fi
这里的 && 表示 “并且” 的意思，当然也可以使用 || 表示 “或者” 执行结果为:

[root@localhost sbin]# sh if3.sh
Please input your score: 90
very good! Your socre is very high!
[root@localhost sbin]# sh if3.sh
Please input your score: 60
Good! You pass the exam.
以上只是简单的介绍了if语句的结构。在判断数值大小除了可以用 (( )) 的形式外，还可以使用 [ ] 但是就不能使用>, < , = 这样的符号了，要使用 -lt （小于），-gt （大于），-le （小于等于），-ge （大于等于），-eq （等于），-ne （不等于）。下面阿铭就以命令行的形式简单比较一下，不再写shell脚本了。

[root@localhost sbin]# a=10; if [ $a -lt 5 ]; then echo ok; fi
[root@localhost sbin]# a=10; if [ $a -gt 5 ]; then echo ok; fi
ok
[root@localhost sbin]# a=10; if [ $a -ge 10 ]; then echo ok; fi
ok
[root@localhost sbin]# a=10; if [ $a -eq 10 ]; then echo ok; fi
ok
[root@localhost sbin]# a=10; if [ $a -ne 10 ]; then echo ok; fi
再看看if中使用 && 和 ||的情况:

[root@localhost sbin]# a=10; if [ $a -lt 1 ] || [ $a -gt 5 ]; then echo ok; fi
ok
[root@localhost sbin]# a=10; if [ $a -gt 1 ] || [ $a -lt 10 ]; then echo ok; fi
ok
shell 脚本中if还经常判断关于档案属性，比如判断是普通文件还是目录，判断文件是否有读写执行权限等。常用的也就几个选项：

-e ：判断文件或目录是否存在

-d ：判断是不是目录，并是否存在

-f ：判断是否是普通文件，并存在

-r ：判断文档是否有读权限

-w ：判断是否有写权限

-x ：判断是否可执行

使用if判断时，具体格式为：

if [ -e filename ] ; then

例子:

[root@localhost sbin]# if [ -d /home/ ]; then echo ok; fi
ok
[root@localhost sbin]# if [ -f /home/ ]; then echo ok; fi
因为 /home/ 为目录为非文件，所以并不会显示 “ok” .

[root@localhost sbin]# if [ -f /root/test.txt ]; then echo ok; fi
ok
[root@localhost sbin]# if [ -r /root/test.txt ]; then echo ok; fi
ok
[root@localhost sbin]# if [ -w /root/test.txt ]; then echo ok; fi
ok
[root@localhost sbin]# if [ -x /root/test.txt ]; then echo ok; fi
[root@localhost sbin]# if [ -e /root/test1.txt ]; then echo ok; fi
在shell 脚本中，除了用if来判断逻辑外，还有一种常用的方式，那就是case了。具体格式为:

case  变量  in
value1)
          command
          ;;
value2)
          command
          ;;
value3)
          command
          ;;
*)
          command
          ;;
esac
上面的结构中，不限制value的个数， * 则代表除了上面的value外的其他值。下面阿铭写一个判断输入数值是奇数或者偶数的脚本:

[root@localhost sbin]# cat case.sh
#! /bin/bash

read -p "Input a number: " n
a=$[$n%2]
case $a in

    1)
        echo "The number is odd."
        ;;
    0)
        echo "The number is even."
        ;;
    *)
        echo "It's not a number!"
        ;;
esac
$a 的值或为1或为0，执行结果为:

[root@localhost sbin]# sh case.sh
Input a number: 100
The number is even.
[root@localhost sbin]# sh case.sh
Input a number: 101
The number is odd.
case脚本常用于编写系统服务的启动脚本，例如/etc/init.d/iptables中就用到了，你不妨去查看一下。

shell脚本中的循环

Shell脚本中也算是一门简易的编程语言了，当然循环是不能缺少的。常用到的循环有for循环和while循环。下面就分别介绍一下两种循环的结构。

for循环
[root@localhost sbin]# cat for.sh
#!  /bin/bash

for i in `seq 1 5`; do
    echo $i
done
脚本中的 seq 1 5 表示从1到5的一个序列。你可以直接运行这个命令试下。脚本执行结果为:

[root@localhost sbin]# sh for.sh
1
2
3
4
5
通过这个脚本就可以看到for循环的基本结构:

for 变量名 in 循环的条件； do
     command
done
这里的 “循环的条件” 可以写成一组字符串或者数字(用1个或者多个空格隔开), 也可以是一条命令的执行结果:

[root@localhost sbin]# for i in 1 2 3 a b; do echo $i; done
1
2
3
a
b
也可以写引用系统命令的执行结果，就像那个 seq 1 5 但是需要用反引号括起来:

[root@localhost sbin]# for file in `ls`; do echo $file; done
case.sh
first.sh
for.sh
if1.sh
if2.sh
if3.sh
option.sh
read.sh
sum.sh
variable.sh
while循环
[root@localhost sbin]# cat while.sh
#! /bin/bash

a=5
while [ $a -ge 1 ]; do
    echo $a
    a=$[$a-1]
done
while 循环格式也很简单:

while  条件; do

          command
done
上例脚本的执行结果为:

[root@localhost sbin]# sh while.sh
5
4
3
2
1
另外你可以把循环条件拿一个冒号替代，这样可以做到死循环，阿铭常常这样写监控脚本:

while :; do
    command
    sleep 3
done
shell脚本中的函数

如果你学过开发，肯定知道函数的作用。如果你是刚刚接触到这个概念的话，也没有关系，其实很好理解的。函数就是把一段代码整理到了一个小单元中，并给这个小单元起一个名字，当用到这段代码时直接调用这个小单元的名字即可。有时候脚本中的某段代总是重复使用，如果写成函数，每次用到时直接用函数名代替即可，这样就节省了时间还节省了空间。

下面阿铭写一个简单的带有函数功能的shell脚本:

[root@localhost sbin]# cat func.sh
#! /bin/bash

function sum()
{
    sum=$[$1+$2]
    echo $sum
}

sum $1 $2
执行结果如下:

[root@localhost sbin]# sh func.sh 1 2
3
func.sh中的 sum() 为自定义的函数，在shell脚本函数的格式为:

function 函数名() {

command

}
有一点阿铭要提醒你一下，在shell脚本中，函数一定要写在最前面，不能出现在中间或者最后，因为函数是要被调用的，如果还没有出现就被调用，肯定是会出错的。

       
